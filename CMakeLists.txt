cmake_minimum_required(VERSION 3.8)
project(game VERSION 0.0 LANGUAGES C CXX)

set(default_build_type "Release")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
      STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# Macros and stuff
if (CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
include(CTest)
endif()

include(CheckIncludeFileCXX)
include(CheckIncludeFile)
include(CheckCXXCompilerFlag)
include(CheckSymbolExists)
include(CheckCXXSymbolExists)
include(cmake/CheckVaArgs.cmake)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

if ($<COMPILE_FEATURES:cxx_return_type_deduction>)
	set(HAVE_AUTO_RETURN YES)
endif()
set(EXTRA_GLOBAL_OPTIONS "" CACHE STRING "Extra options to set")
set(EXTRA_LINKER_OPTIONS "" CACHE STRING "Extra linker options to set")
set(EXTRA_GLOBAL_INCLUDES "" CACHE STRING "Extra include directories for all targets")
add_compile_options(${EXTRA_GLOBAL_OPTIONS})
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_LINKER_OPTIONS}")
include_directories(${EXTRA_GLOBAL_INCLUDES})

check_va_args_macro()

if ($<CONFIG:Debug>)
	add_compile_options(${PROJECT_NAME} PRIVATE $<$<C_COMPILER_ID:MSVC>:/W4 /WX>)
	add_compile_options(${PROJECT_NAME} PRIVATE $<$<NOT:$<C_COMPILER_ID:MSVC>>:-Wall -Wextra -pedantic -Werror>)
endif()

include_directories(${CMAKE_CURRENT_BINARY_DIR})

# Set some variables to match autoconf ones
set(PACKAGE_NAME ${PROJECT_NAME})
string(TOLOWER ${PACKAGE_NAME} PACKAGE)
set(PACKAGE_VERSION ${PROJECT_VERSION})
string(CONCAT PACKAGE_STRING ${PACKAGE_NAME} " " ${VERSION})
set(PACKAGE_BUGREPORT aiden.woodruff@gmail.com)
set(PACKAGE_URL ${HOMEPAGE_URL})

# Check for headers
check_include_file_cxx(string HAVE_STRING)
check_include_file_cxx(cstdint HAVE_CSTDINT)
check_include_file_cxx(iostream HAVE_IOSTREAM)
check_include_file_cxx(functional HAVE_FUNCTIONAL)
check_include_file_cxx(random HAVE_RANDOM)
check_include_file_cxx(cmath HAVE_CMATH)
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_include_file(memory.h HAVE_MEMORY_H)
check_include_file(stdint.h HAVE_STDINT_H)
check_include_file(stdlib.h HAVE_STDLIB_H)
check_include_file(string.h HAVE_STRING_H)
check_include_file(strings.h HAVE_STRINGS_H)
check_include_file(sys/stat.h HAVE_SYS_STAT_H)
check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(unistd.h HAVE_UNISTD_H)

# Check for libraries
if (USE_PDCURSES)
	message(STATUS "Using PDCurses")
	set(CURSES_INCLUDE_DIRS ${PDCURSES_SRCDIR})
	set(CURSES_LIBRARIES ${PDCURSES_LIBRARIES})
	set(HAVE_CURSES YES)
	set(HAVE_CURSES_H YES)
else ()
	if(DEFINED ENV{TRAVIS_OS_NAME} AND ("$ENV{TRAVIS_OS_NAME}" STREQUAL "windows"))
		find_package(Curses PATHS "${PROJECT_SOURCE_DIR}/ncurses-6.1")
	else()
		find_package(Curses)
		if (NOT CURSES_FOUND)
			find_package(PDCurses MODULE REQUIRED)
			set(CURSES_LIBRARIES "${PDCURSES_LIBRARIES}")
			set(CURSES_INCLUDE_DIRS "${PDCURSES_INCLUDE_DIR}")
			mark_as_advanced(CURSES_LIBRARIES CURSES_INCLUDE_DIRS)
		endif()
	endif()
	set(HAVE_CURSES ${CURSES_FOUND})
	set(HAVE_CURSES_H ${CURSES_HAVE_CURSES_H})
	set(HAVE_NCURSES_H ${CURSES_HAVE_NCURSES_H})
	set(HAVE_NCURSES_CURSES_H ${CURSES_HAVE_NCURSES_CURSES_H})
endif ()
if (HAVE_NCURSES_CURSES_H)
	set(CURSES_HEADER "ncurses/curses.h")
	set(HAVE_NCURSES YES)
elseif (HAVE_NCURSES_H)
	set(CURSES_HEADER "ncurses.h")
	set(HAVE_NCURSES YES)
elseif (HAVE_CURSES_H)
	set(CURSES_HEADER "curses.h")
endif()

if (HAVE_CURSES OR HAVE_PDCURSES)
	set(CMAKE_REQUIRED_INCLUDES ${CURSES_INCLUDE_DIRS})
	set(CMAKE_REQUIRED_LIBRARIES ${CURSES_LIBRARIES})
	check_cxx_symbol_exists(start_color ${CURSES_HEADER} HAVE_CURSES_COLOR)
	if (HAVE_CURSES_COLOR)
		message(STATUS "Found color support for curses")
	else()
		message(STATUS "Did NOT find color support for curses")
	endif()
endif()

find_library(HAVE_MATH m)

# Check for types
check_cxx_symbol_exists(uint8_t cstdint HAVE_UINT8_T)
check_cxx_symbol_exists(uint16_t cstdint HAVE_UINT16_T)

if ($<VERSION_GREATER_EQUAL:"${CMAKE_VERSION}","3.12")
add_compile_definitions(HAVE_CMAKE_CONFIG_H)
else()
add_compile_options(-DHAVE_CMAKE_CONFIG_H)
endif()

configure_file("${PROJECT_SOURCE_DIR}/cmakeconfig.h.in" "${PROJECT_BINARY_DIR}/cmakeconfig.h" ESCAPE_QUOTES @ONLY)

add_subdirectory(src)

if((CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME OR GAME_BUILD_TESTING) AND BUILD_TESTING)
add_subdirectory(test)
endif()
